{"version":3,"sources":["/app/fetch/promiseMiddleware.js"],"names":[],"mappings":";;;;;;;;;;;;;;qBAMwB,iBAAiB;;;;AAFzC,OAAO,CAAC,aAAa,CAAC,CAAC,QAAQ,EAAE,CAAC;;AAEnB,SAAS,iBAAiB,GAAG;AACxC,WAAO,cAAI;eAAI,gBAAM,EAAI;;gBAEd,OAAO,GAAmB,MAAM,CAAhC,OAAO;gBAAE,IAAI,GAAa,MAAM,CAAvB,IAAI;;gBAAK,IAAI,4BAAI,MAAM;;;AAEvC,gBAAI,CAAC,OAAO,EAAE,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC;;AAElC,gBAAM,OAAO,GAAG,IAAI,GAAG,UAAU,CAAC;AAClC,gBAAM,OAAO,GAAG,IAAI,GAAG,UAAU,CAAC;AAClC,gBAAM,OAAO,GAAG,IAAI,GAAG,UAAU,CAAC;;AAElC,gBAAI,cAAK,IAAI,IAAE,IAAI,EAAE,OAAO,IAAE,CAAC;;AAE/B,mBAAO,OAAO,CACT,IAAI,CAAC,aAAG,EAAI;AACT,oBAAI,OAAO,GAAG,CAAC,IAAI,KAAK,UAAU,EAAE;AAChC,2BAAO,GAAG,CAAC,IAAI,EAAE,CAAC;iBACrB;AACD,uBAAO,GAAG,CAAC;aACd,CAAC,CACD,IAAI,CAAC,cAAI,EAAI;;;AAGV,oBAAI,IAAI,KAAK,OAAO,IAAI,CAAC,IAAI,KAAK,WAAW,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;AACvE,wBAAI,cAAK,IAAI,IAAE,IAAI,EAAJ,IAAI,EAAE,IAAI,EAAE,OAAO,IAAE,CAAC;iBACxC,MAAM;;AAEH,wBAAI,cAAK,IAAI,IAAE,IAAI,EAAJ,IAAI,EAAE,IAAI,EAAE,OAAO,IAAE,CAAC;iBACxC;AACD,uBAAO,IAAI,CAAC;aACf,CAAC,CACD,IAAI,CAAC,SAAS,EAAE,eAAK,EAAI;;AAEtB,uBAAO,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,KAAK,CAAC,CAAC;AACjC,oBAAI,IAAI,aAAC;AACT,oBAAI,OAAO,KAAK,CAAC,IAAI,KAAK,QAAQ,EAAE;AAChC,wBAAI,GAAG,KAAK,CAAC;iBAChB,MAAM;AACH,wBAAI,GAAG;AACH,+BAAO,EAAE,MAAM,CAAC,KAAK,CAAC;AACtB,4BAAI,EAAE,CAAC,CAAC;qBACX,CAAC;iBACL;AACD,oBAAI,cAAK,IAAI,IAAE,IAAI,EAAJ,IAAI,EAAE,IAAI,EAAE,OAAO,IAAE,CAAC;AACrC,uBAAO,KAAK,CAAC;aAChB,CAAC,CAAC;SACV;KAAA,CAAC;CACL","file":"/app/fetch/promiseMiddleware.js","sourcesContent":["/**\n * promise中间件, 让action返回promise,把action与reducer联系起来\n * author: younthxg@gmail.com\n */\nrequire('es6-promise').polyfill();\n\nexport default function promiseMiddleware() {\n    return next => action => {\n        // rest是action对象剩下的变量集合\n        const {promise, type, ...rest} = action;\n        // 非promise直接返回\n        if (!promise) return next(action);\n        // promise对下各种状态类型\n        const SUCCESS = type + '_SUCCESS';\n        const REQUEST = type + '_REQUEST';\n        const FAILURE = type + '_FAILURE';\n        // 开始请求\n        next({...rest, type: REQUEST});\n\n        return promise\n            .then(res => {\n                if (typeof res.json === 'function') {\n                    return res.json();\n                }\n                return res;\n            })\n            .then(json => {\n                // success 结果包裹在json中\n                // console.log(json && (typeof json.code === 'undefined' || Number(json.code) === 0));\n                if (json && (typeof json.code === 'undefined' || Number(json.code) === 0)) {\n                    next({...rest, json, type: SUCCESS});\n                } else {\n                    // error_no 不等于当失败处理\n                    next({...rest, json, type: FAILURE});\n                }\n                return true;\n            })\n            .then(undefined, error => {\n                // error\n                console.log(error, typeof error);\n                let json;\n                if (typeof error.code === 'number') {\n                    json = error;\n                } else {\n                    json = {\n                        message: String(error),\n                        code: -1\n                    };\n                }\n                next({...rest, json, type: FAILURE});\n                return false;\n            });\n    };\n}\n"]}