{"version":3,"sources":["/app/store/configureStore.js"],"names":[],"mappings":";;;;;;;qBAMwB,cAAc;;;;qBANgB,OAAO;;0BACjC,aAAa;;;;wBACjB,aAAa;;;;sCAEP,4BAA4B;;;;AAE3C,SAAS,cAAc,CAAC,YAAY,EAAE,OAAO,EAAE;;AAE1D,QAAI,UAAU,GAAG,8DAAoC,CAAC;;AAEtD,QAAI,gBAAgB,aAAC;;;AAGrB,oBAAgB,GAAG,MAAM,CAAC,iBAAiB,GACvC,oBAAQ,wCAAmB,UAAU,CAAC,EAAE,MAAM,CAAC,iBAAiB,EAAE,CAAC,GACnE,oBAAQ,wCAAmB,UAAU,CAAC,CAAC,CAAC;;AAE5C,QAAM,KAAK,GAAG,gBAAgB,oBAAa,wBAAc,YAAY,CAAC,CAAC;;AAEvE,WAAO,KAAK,CAAC;CAChB","file":"/app/store/configureStore.js","sourcesContent":["import { createStore, compose, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nimport promiseMiddleware from '../fetch/promiseMiddleware';\n\nexport default function configureStore(initialState, history) {\n\n    let middleware = [thunkMiddleware, promiseMiddleware];\n    // 不同环境下构造不同的 store构成函数\n    let finalCreateStore;\n\n    // 触发 redux-devtools\n    finalCreateStore = window.devToolsExtension ?\n        compose(applyMiddleware(...middleware), window.devToolsExtension()) :\n        compose(applyMiddleware(...middleware));\n    // 创建 store，第二个参数是可选的, 用于设置 state 初始状态\n    const store = finalCreateStore(createStore)(rootReducer, initialState);\n\n    return store;\n}"]}